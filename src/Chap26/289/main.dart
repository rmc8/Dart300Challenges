/*
1. extensionを使うことによって既存のクラスに対して新しい機能の追加ができます。元のコードを変更することがなく
機能の追加ができるため柔軟性が高い実装が可能です。
2. 機能ごとにグルーピングしてメソッドをまとめることで、コードを整頓できます。メインのクラスの定義が
シンプルになり可読性が向上します。
3. extensionに名前をつけることによって追加する機能に名前空間を提供できます。同名のメソッドが衝突
するリスクを減らせます。
4. extensionは型に紐づいているため、コンパイル時に型チェックがされます。実行時のエラーが減り、
コードの安全性が高まります。
5. 多くのIDEでextensionがサポートされているので、コード保管や静的解析の恩恵を受けられます。
6. 頻繁に使用するutility関数をextensionとして定義することでかんたんに再利用できます。
7. 特定の条件下のみで利用可能な機能をextensionを使って実装できます。
8. riverpodでクラスを使った状態管理をするためにコードが大規模になることがあります。
Flutterでの状態管理やコードの保守ををより簡単にするために、extensionのメリットが有用です。
*/

extension StringExtension on String {
  bool isValidEmail() {
    return RegExp(
            r'^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$')
        .hasMatch(this);
  }
}

void main() {
  String email = 'example@email.com';
  print(email.isValidEmail());
}
